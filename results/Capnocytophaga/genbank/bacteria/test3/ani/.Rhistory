alignmentPath="/home/robmur/RibDif2/results/Capnocytophaga/genbank/bacteria/GCA_002999135.1/GCA_002999135.1_ASM299913v1_genomic.fna"
fullname  = readLines(alignmentPath,n=1)
alignmentPath='D:/OneDrive - University of Copenhagen/PhD/Projects/RibDif2/RibDif2/RibDif2/results/Capnocytophaga/amplicons/Capnocytophaga-my_v3v4.amplicons'
fullname  = readLines(alignmentPath,n=1)
fullname
splitname = strsplit(fullname, split='_')[[1]]
splitname
GCF=gsub(">","",paste(splitname[1:2], collapse='_'))
gcf
GCF
NZ=paste(splitname[3:4], collapse='_')
gen=splitname[5]
spec=paste(splitname[6:length(splitname)-1],collapse=' ')
cat(paste(GCF,gen,spec,length(read.fasta(alignmentPath)) , "-","-","-","-", "-",'\n',sep='\t'))
cat(paste(GCF,gen,spec , "-","-","-","-", "-",'\n',sep='\t'))
cat(paste(GCF,gen,spec,length(1:10) , "-","-","-","-", "-",'\n',sep='\t'))
fullname=">CP027229.1_Capnocytophaga_sp._oral_taxon_878_strain_F0545_chromosome_complete_genome"
splitname = strsplit(fullname, split='_')[[1]]
GCF=gsub(">","",paste(splitname[1:2], collapse='_'))
NZ=paste(splitname[3:4], collapse='_')
gen=splitname[5]
spec=paste(splitname[6:length(splitname)-1],collapse=' ')
cat(paste(GCF,gen,spec,length(1:10) , "-","-","-","-", "-",'\n',sep='\t'))
divs=rep(-1, max_len)
max_len=100000
divs=rep(-1, max_len)
plot(divs, pch=16, cex=0.1, type="p", main="Diversity", xlab="Nucleotide position", ylab="Diversity")
lines(roll_means_30, col=3)
roll_means_30=rollmean(divs, k = 30)
splitname
GCF
gen=splitname[5]
setwd("D:/OneDrive - University of Copenhagen/PhD/Projects/RibDif2/RibDif2/RibDif2/results/Capnocytophaga/genbank/bacteria/test3/ani")
read.table("ANIm_similarity_errors.tab")
mismatch=read.table("ANIm_similarity_errors.tab")
read.table("ANIm_similarity_errors.tab", skip = 1)
read.table("ANIm_similarity_errors.tab", skip = 1)[,-1]
mismatch=read.table("ANIm_similarity_errors.tab", skip = 1)[,-1]
upperMismatch=mismatch[upper.tri(mismatch)]
upperMismatch
upper.tri(mismatch)
mismatch
upperMismatch
round(mean(upperMismatch),2)
mean(upperMismatch)
round(sd(upperMismatch),2)
alignmentPath
alignmentPath = 'D:\\OneDrive - University of Copenhagen\\PhD\\Projects\\RibDif2\\RibDif2\\RibDif2\\results\\Capnocytophaga\\genbank\\bacteria\\test3\\test3.16sAln'
fasta=read.fasta(alignmentPath)
library(seqinr)
library(ape)
library(zoo)
install.packages("zoo")
install.packages("seqinr")
library(seqinr)
library(ape)
library(zoo)
fasta=read.fasta(alignmentPath)
#turning into a matrix
DNA_mat=do.call(rbind,fasta)
fasta
DNA_mat
View(DNA_mat)
#finding dimensions of data
max_len=NCOL(DNA_mat)
n_seqs=NROW(DNA_mat)
#making empty vector for diversity across string
divs=rep(-1, max_len)
divs
i=1
levels=c("A","G", "C", "T", "-")
#turn each position into a table with of counts for each nucleotide, while including 0s.
per_pos=factor(toupper(DNA_mat[,i]), levels=c("A","G", "C", "T", "-"))
per_pos
probs=table(per_pos)/n_seqs
probs
?ifelse
log(probs)
divs[i]=-sum(probs*ifelse(log(probs)==-Inf, 0, log(probs))) #shannon index
divs[i]
View(fasta)
View(fasta)
fasta$CP022379.1_Capnocytophaga_sputigena_strain_D1179_chromosome_complete_genome_2
fasta$CP022379.1_Capnocytophaga_sputigena_strain_D1179_chromosome_complete_genome_2[1]
?toupper
DNA_mat[,i]
toupper(DNA_mat[,i])
per_pos
probs
table(per_pos)
per_pos
table(per_pos)
probs
divs
probs
sum(probs*ifelse(log(probs)==-Inf, 0, log(probs)))
log(probs)
?ifelse()
alignmentPath = 'D:\\OneDrive - University of Copenhagen\\PhD\\Projects\\RibDif2\\RibDif2\\RibDif2\\results\\Capnocytophaga\\genbank\\bacteria\\test3\\test3.16sAln'
fasta=read.fasta(alignmentPath)
#turning into a matrix
DNA_mat=do.call(rbind,fasta)
#finding dimensions of data
max_len=NCOL(DNA_mat)
n_seqs=NROW(DNA_mat)
#making empty vector for diversity across string
divs=rep(-1, max_len)
#looping across all nucleotide positions
for( i in 1:max_len) {
#turn each position into a table with of counts for each nucleotide, while including 0s.
per_pos=factor(toupper(DNA_mat[,i]), levels=c("A","G", "C", "T", "-"))
probs=table(per_pos)/n_seqs
divs[i]=-sum(probs*ifelse(log(probs)==-Inf, 0, log(probs))) #shannon index
}
divs[1]
i=1
#turn each position into a table with of counts for each nucleotide, while including 0s.
per_pos=factor(toupper(DNA_mat[,i]), levels=c("A","G", "C", "T", "-"))
per_pos
probs=table(per_pos)/n_seqs
probs
sum(probs*ifelse(log(probs)==-Inf, 0, log(probs)))
roll_means_30=rollmean(divs, k = 30)
roll_means_30
?rollmean()
plot(divs, pch=16, cex=0.1, type="p", main="Diversity", xlab="Nucleotide position", ylab="Diversity")
lines(roll_means_30, col=3)
legend("topright", legend = "Rolling mean", col=3, lty=1)
tree=read.tree(tree_file)
alignmentPath = 'D:\\OneDrive - University of Copenhagen\\PhD\\Projects\\RibDif2\\RibDif2\\RibDif2\\results\\Capnocytophaga\\genbank\\bacteria\\test3\\test3.16sAln'
fasta=read.fasta(alignmentPath)
View(fasta)
#turning into a matrix
DNA_mat=do.call(rbind,fasta)
#finding dimensions of data
max_len=NCOL(DNA_mat)
n_seqs=NROW(DNA_mat)
#making empty vector for diversity across string
divs=rep(-1, max_len)
#looping across all nucleotide positions
for( i in 1:max_len) {
#turn each position into a table with of counts for each nucleotide, while including 0s.
per_pos=factor(toupper(DNA_mat[,i]), levels=c("A","G", "C", "T", "-"))
probs=table(per_pos)/n_seqs
divs[i]=-sum(probs*ifelse(log(probs)==-Inf, 0, log(probs))) #shannon index
}
roll_means_30=rollmean(divs, k = 30)
head(roll_means_30)
head(divs)
plot(divs, pch=16, cex=0.1, type="p", main="Diversity", xlab="Nucleotide position", ylab="Diversity")
lines(roll_means_30, col=3)
lines(roll_means_30, col=3)
?lines
roll_means_30[1,1]
head(rollmean(divs, k = 3))
head(rollmean(divs, k = 3), n = 100)
head(rollmean(divs, k = 100), n = 100)
tree=read.tree(tree_file)
tree_file='D:\\OneDrive - University of Copenhagen\\PhD\\Projects\\RibDif2\\RibDif2\\RibDif2\\results\\Capnocytophaga\\genbank\\bacteria\\test3\\test3.16STree'
tree=read.tree(tree_file)
legend("topright", legend = "Rolling mean", col=3, lty=1)
plot(tree)
getwd()
pngOut="test3.pdf"
pdf(file = pngOut,width = 7.4,height = 5)
par(mfrow=c(1,2))
par(mar = c(2.5, 2.5, 1.8,.5), family="serif", mfrow=c(2,1),mgp = c(1.3, 0.3, 0), font.lab=2)
plot(divs, pch=16, cex=0.1, type="p", main="Diversity", xlab="Nucleotide position", ylab="Diversity")
lines(roll_means_30, col=3)
legend("topright", legend = "Rolling mean", col=3, lty=1)
plot(tree)
dev.off()
alignmentPath = 'D:\\OneDrive - University of Copenhagen\\PhD\\Projects\\RibDif2\\RibDif2\\RibDif2\\results\\Capnocytophaga\\genbank\\bacteria\\test3\\test3.16sAln'
fasta=read.fasta(alignmentPath)
#turning into a matrix
DNA_mat=do.call(rbind,fasta)
#finding dimensions of data
max_len=NCOL(DNA_mat)
n_seqs=NROW(DNA_mat)
#making empty vector for diversity across string
divs=rep(-1, max_len)
#looping across all nucleotide positions
for( i in 1:max_len) {
#turn each position into a table with of counts for each nucleotide, while including 0s.
per_pos=factor(toupper(DNA_mat[,i]), levels=c("A","G", "C", "T", "-"))
probs=table(per_pos)/n_seqs
divs[i]=-sum(probs*ifelse(log(probs)==-Inf, 0, log(probs))) #shannon index
}
totalDiv=sum(divs)
totalDiv
sum(probs*ifelse(log(probs)==-Inf, 0, log(probs)))
probs
i
max_len
pos
per_pos
totalDiv
